-- Automatically generated packer.nvim plugin loader code

if vim.api.nvim_call_function('has', {'nvim-0.5'}) ~= 1 then
  vim.api.nvim_command('echohl WarningMsg | echom "Invalid Neovim version for packer.nvim! | echohl None"')
  return
end

vim.api.nvim_command('packadd packer.nvim')

local no_errors, error_msg = pcall(function()

  local time
  local profile_info
  local should_profile = true
  if should_profile then
    local hrtime = vim.loop.hrtime
    profile_info = {}
    time = function(chunk, start)
      if start then
        profile_info[chunk] = hrtime()
      else
        profile_info[chunk] = (hrtime() - profile_info[chunk]) / 1e6
      end
    end
  else
    time = function(chunk, start) end
  end
  
local function save_profiles(threshold)
  local sorted_times = {}
  for chunk_name, time_taken in pairs(profile_info) do
    sorted_times[#sorted_times + 1] = {chunk_name, time_taken}
  end
  table.sort(sorted_times, function(a, b) return a[2] > b[2] end)
  local results = {}
  for i, elem in ipairs(sorted_times) do
    if not threshold or threshold and elem[2] > threshold then
      results[i] = elem[1] .. ' took ' .. elem[2] .. 'ms'
    end
  end

  _G._packer = _G._packer or {}
  _G._packer.profile_output = results
end

time([[Luarocks path setup]], true)
local package_path_str = "/Users/delfitz/.cache/nvim/packer_hererocks/2.1.0-beta3/share/lua/5.1/?.lua;/Users/delfitz/.cache/nvim/packer_hererocks/2.1.0-beta3/share/lua/5.1/?/init.lua;/Users/delfitz/.cache/nvim/packer_hererocks/2.1.0-beta3/lib/luarocks/rocks-5.1/?.lua;/Users/delfitz/.cache/nvim/packer_hererocks/2.1.0-beta3/lib/luarocks/rocks-5.1/?/init.lua"
local install_cpath_pattern = "/Users/delfitz/.cache/nvim/packer_hererocks/2.1.0-beta3/lib/lua/5.1/?.so"
if not string.find(package.path, package_path_str, 1, true) then
  package.path = package.path .. ';' .. package_path_str
end

if not string.find(package.cpath, install_cpath_pattern, 1, true) then
  package.cpath = package.cpath .. ';' .. install_cpath_pattern
end

time([[Luarocks path setup]], false)
time([[try_loadstring definition]], true)
local function try_loadstring(s, component, name)
  local success, result = pcall(loadstring(s))
  if not success then
    vim.schedule(function()
      vim.api.nvim_notify('packer.nvim: Error running ' .. component .. ' for ' .. name .. ': ' .. result, vim.log.levels.ERROR, {})
    end)
  end
  return result
end

time([[try_loadstring definition]], false)
time([[Defining packer_plugins]], true)
_G.packer_plugins = {
  ["base16-vim"] = {
    loaded = true,
    path = "/Users/delfitz/.local/share/nvim/site/pack/packer/start/base16-vim"
  },
  ["beacon.nvim"] = {
    config = { "\27LJ\2\nl\0\0\3\0\4\0\t6\0\0\0009\0\1\0'\2\2\0B\0\2\0016\0\0\0009\0\1\0'\2\3\0B\0\2\1K\0\1\0$ let g:beacon_minimal_jump = 3 \29 let g:beacon_size = 20 \bcmd\bvim\0" },
    loaded = true,
    path = "/Users/delfitz/.local/share/nvim/site/pack/packer/start/beacon.nvim"
  },
  fzf = {
    loaded = true,
    path = "/Users/delfitz/.local/share/nvim/site/pack/packer/start/fzf"
  },
  ["fzf.vim"] = {
    loaded = true,
    path = "/Users/delfitz/.local/share/nvim/site/pack/packer/start/fzf.vim"
  },
  ["indent-blankline.nvim"] = {
    config = { "\27LJ\2\n²\1\0\0\3\0\a\0\r6\0\0\0009\0\1\0'\2\2\0B\0\2\0016\0\0\0009\0\1\0'\2\3\0B\0\2\0016\0\0\0009\0\4\0'\1\6\0=\1\5\0K\0\1\0\v999999\16colorcolumn\awo9 hi IndentBlanklineChar guifg=#444466 gui=nocombine ( let g:indent_blankline_char = '|' \bcmd\bvim\0" },
    loaded = true,
    path = "/Users/delfitz/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim"
  },
  ["lualine.nvim"] = {
    loaded = true,
    needs_bufread = false,
    path = "/Users/delfitz/.local/share/nvim/site/pack/packer/opt/lualine.nvim"
  },
  ["nvim-bufferline.lua"] = {
    loaded = true,
    needs_bufread = false,
    path = "/Users/delfitz/.local/share/nvim/site/pack/packer/opt/nvim-bufferline.lua"
  },
  ["nvim-treesitter"] = {
    loaded = true,
    path = "/Users/delfitz/.local/share/nvim/site/pack/packer/start/nvim-treesitter"
  },
  ["nvim-web-devicons"] = {
    loaded = true,
    path = "/Users/delfitz/.local/share/nvim/site/pack/packer/start/nvim-web-devicons"
  },
  ["packer.nvim"] = {
    loaded = true,
    path = "/Users/delfitz/.local/share/nvim/site/pack/packer/start/packer.nvim"
  },
  ["vim-illuminate"] = {
    config = { "\27LJ\2\n€\1\0\0\3\0\4\0\t6\0\0\0009\0\1\0'\2\2\0B\0\2\0016\0\0\0009\0\1\0'\2\3\0B\0\2\1K\0\1\0$ hi illuminateCurWord gui=none 1 hi illuminateWord guibg=#ababab guifg=none \bcmd\bvim\0" },
    loaded = true,
    path = "/Users/delfitz/.local/share/nvim/site/pack/packer/start/vim-illuminate"
  },
  ["vim-lua-format"] = {
    config = { "\27LJ\2\n¢\1\0\0\3\0\4\0\t6\0\0\0009\0\1\0'\2\2\0B\0\2\0016\0\0\0009\0\1\0'\2\3\0B\0\2\1K\0\1\0. autocmd BufWrite *.lua call LuaFormat() I autocmd FileType lua nnoremap <buffer> <C-f> :call LuaFormat()<CR> \bcmd\bvim\0" },
    loaded = true,
    path = "/Users/delfitz/.local/share/nvim/site/pack/packer/start/vim-lua-format"
  },
  ["vim-surround"] = {
    loaded = true,
    path = "/Users/delfitz/.local/share/nvim/site/pack/packer/start/vim-surround"
  }
}

time([[Defining packer_plugins]], false)
-- Setup for: nvim-bufferline.lua
time([[Setup for nvim-bufferline.lua]], true)
try_loadstring("\27LJ\2\n<\0\0\3\0\3\0\a6\0\0\0'\2\1\0B\0\2\0029\0\2\0004\2\0\0B\0\2\1K\0\1\0\nsetup\15bufferline\frequire\0", "setup", "nvim-bufferline.lua")
time([[Setup for nvim-bufferline.lua]], false)
time([[packadd for nvim-bufferline.lua]], true)
vim.cmd [[packadd nvim-bufferline.lua]]
time([[packadd for nvim-bufferline.lua]], false)
-- Setup for: lualine.nvim
time([[Setup for lualine.nvim]], true)
try_loadstring("\27LJ\2\nÌ\3\0\0\6\0\25\0%6\0\0\0'\2\1\0B\0\2\0029\0\2\0005\2\b\0005\3\3\0005\4\4\0=\4\5\0035\4\6\0=\4\a\3=\3\t\0025\3\v\0004\4\3\0005\5\n\0>\5\1\4=\4\f\0034\4\3\0005\5\r\0>\5\1\4=\4\14\0034\4\3\0005\5\15\0>\5\1\4=\4\16\0034\4\3\0005\5\17\0>\5\1\0045\5\18\0>\5\2\4=\4\19\0035\4\20\0=\4\21\0035\4\22\0=\4\23\3=\3\24\2B\0\2\1K\0\1\0\rsections\14lualine_z\1\2\0\0\rlocation\14lualine_y\1\2\0\0\rprogress\14lualine_x\1\2\0\0\15fileformat\1\2\1\0\rfiletype\14separator\6|\14lualine_c\1\2\1\0\rfilename\tpath\3\2\14lualine_b\1\2\1\0\vbranch\ticon\bî‚ \14lualine_a\1\0\0\1\2\2\0\tmode\ticon\bî˜«\nupper\2\foptions\1\0\0\25component_separators\1\3\0\0\5\5\23section_separators\1\3\0\0\5\5\1\0\1\ntheme\fonedark\nsetup\flualine\frequire\0", "setup", "lualine.nvim")
time([[Setup for lualine.nvim]], false)
time([[packadd for lualine.nvim]], true)
vim.cmd [[packadd lualine.nvim]]
time([[packadd for lualine.nvim]], false)
-- Config for: vim-illuminate
time([[Config for vim-illuminate]], true)
try_loadstring("\27LJ\2\n€\1\0\0\3\0\4\0\t6\0\0\0009\0\1\0'\2\2\0B\0\2\0016\0\0\0009\0\1\0'\2\3\0B\0\2\1K\0\1\0$ hi illuminateCurWord gui=none 1 hi illuminateWord guibg=#ababab guifg=none \bcmd\bvim\0", "config", "vim-illuminate")
time([[Config for vim-illuminate]], false)
-- Config for: beacon.nvim
time([[Config for beacon.nvim]], true)
try_loadstring("\27LJ\2\nl\0\0\3\0\4\0\t6\0\0\0009\0\1\0'\2\2\0B\0\2\0016\0\0\0009\0\1\0'\2\3\0B\0\2\1K\0\1\0$ let g:beacon_minimal_jump = 3 \29 let g:beacon_size = 20 \bcmd\bvim\0", "config", "beacon.nvim")
time([[Config for beacon.nvim]], false)
-- Config for: indent-blankline.nvim
time([[Config for indent-blankline.nvim]], true)
try_loadstring("\27LJ\2\n²\1\0\0\3\0\a\0\r6\0\0\0009\0\1\0'\2\2\0B\0\2\0016\0\0\0009\0\1\0'\2\3\0B\0\2\0016\0\0\0009\0\4\0'\1\6\0=\1\5\0K\0\1\0\v999999\16colorcolumn\awo9 hi IndentBlanklineChar guifg=#444466 gui=nocombine ( let g:indent_blankline_char = '|' \bcmd\bvim\0", "config", "indent-blankline.nvim")
time([[Config for indent-blankline.nvim]], false)
-- Config for: vim-lua-format
time([[Config for vim-lua-format]], true)
try_loadstring("\27LJ\2\n¢\1\0\0\3\0\4\0\t6\0\0\0009\0\1\0'\2\2\0B\0\2\0016\0\0\0009\0\1\0'\2\3\0B\0\2\1K\0\1\0. autocmd BufWrite *.lua call LuaFormat() I autocmd FileType lua nnoremap <buffer> <C-f> :call LuaFormat()<CR> \bcmd\bvim\0", "config", "vim-lua-format")
time([[Config for vim-lua-format]], false)
if should_profile then save_profiles() end

end)

if not no_errors then
  vim.api.nvim_command('echohl ErrorMsg | echom "Error in packer_compiled: '..error_msg..'" | echom "Please check your config for correctness" | echohl None')
end
